//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Configuration;
using System.Linq;
using System.Reflection; 

namespace SPMeta2ManualTest
{
	public static class AppSettings
	{
    	public static string targetSiteUrl = AppSettingsUtils.GetSafeStringValue("targetSiteUrl");
    	public static string sharePointUserName = AppSettingsUtils.GetSafeStringValue("sharePointUserName");
    
	}

	#region utils

	public static class AppSettingsUtils
    {
        public static int GetSafeIntValue(string key)
        {
            EnsureKey(key);
            return Convert.ToInt32(ConfigurationManager.AppSettings[key]);
        }

        public static string GetSafeStringValue(string key)
        {
            EnsureKey(key);
            return Convert.ToString(ConfigurationManager.AppSettings[key]);
        }

        public static bool GetSafeBooleanValue(string key)
        {
            EnsureKey(key);
            return Convert.ToBoolean(ConfigurationManager.AppSettings[key]);
        }

        private static void EnsureKey(string key)
        {
            if (!ConfigurationManager.AppSettings.AllKeys.Contains(key))
                throw new Exception("The App Setting '" + key + "' not found in the config file.");
        }

        public static void TraceSettingsToConsole(Type settingsType)
        {
            Console.WriteLine("Starting provision with the following settings...");
            Console.WriteLine();

            foreach (var prop in settingsType.GetFields(BindingFlags.Public | BindingFlags.Static))
            {
                Console.ForegroundColor = ConsoleColor.Gray;

                var value = prop.GetValue(null);
                var prefix = "\t";

                if (value is bool)
                {
                    var boolValue = (bool)value;

                    if (boolValue)
                    {
                        prefix = string.Empty;
                        Console.ForegroundColor = ConsoleColor.Green;
                    }

                    Console.WriteLine("- {2}[{0}] value:[{1}]", prop.Name, prop.GetValue(null), prefix);
                    Console.ResetColor();
                }
                else if (value is int)
                {
                    var intValue = (int)value;

                    if (intValue > 0)
                    {
                        prefix = string.Empty;
                        Console.ForegroundColor = ConsoleColor.Green;
                    }

                    Console.WriteLine("- {2}[{0}] value:[{1}]", prop.Name, prop.GetValue(null), prefix);
                    Console.ResetColor();
                }
                else if (value is string)
                {
                    var strValue = (string)value;

                    if (!string.IsNullOrEmpty(strValue))
                    {
                        prefix = string.Empty;
                        Console.ForegroundColor = ConsoleColor.Green;
                    }
					
                    Console.WriteLine("- {2}[{0}] value:[{1}]", prop.Name, prop.GetValue(null), prefix);
                    Console.ResetColor();
                }
                else
                {
                    Console.WriteLine("- {2}[{0}] value:[{1}]", prop.Name, prop.GetValue(null), prefix);
                }
            }

            Console.WriteLine();
        }
    }

	#endregion
}